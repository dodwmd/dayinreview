name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write
  issues: write
  packages: write


jobs:
  test:
    name: test application
    runs-on: ubuntu-latest
    env:
      PHP_VERSION: '8.3'
      NODE_VERSION: '20'
      DB_CONNECTION: mysql
      DB_DATABASE: testing
      DB_USERNAME: sail
      DB_PASSWORD: password
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testing
          MYSQL_USER: sail
          MYSQL_PASSWORD: password
          # Grant privileges to create multiple test databases for parallel testing
          MYSQL_ROOT_HOST: '%'
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
      
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, dom, fileinfo, mysql, redis
          coverage: xdebug

      - name: copy .env file
        run: cp .env.example .env

      - name: set environment variables
        run: |
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=testing" >> .env
          echo "DB_USERNAME=sail" >> .env
          echo "DB_PASSWORD=password" >> .env
          echo "REDIS_HOST=127.0.0.1" >> .env
          echo "REDIS_PASSWORD=null" >> .env
          echo "REDIS_PORT=6379" >> .env
          echo "CACHE_DRIVER=redis" >> .env
          echo "QUEUE_CONNECTION=redis" >> .env
          echo "SESSION_DRIVER=redis" >> .env

      - name: Set up test database
        run: |
          mysql --host=127.0.0.1 --port=3306 --user=root --password=root -e "CREATE DATABASE IF NOT EXISTS testing;"
          mysql --host=127.0.0.1 --port=3306 --user=root --password=root -e "CREATE USER IF NOT EXISTS 'sail'@'%' IDENTIFIED BY 'password';"
          mysql --host=127.0.0.1 --port=3306 --user=root --password=root -e "GRANT ALL PRIVILEGES ON *.* TO 'sail'@'%';"
          mysql --host=127.0.0.1 --port=3306 --user=root --password=root -e "FLUSH PRIVILEGES;"

      - name: install composer dependencies
        run: composer install --no-interaction --prefer-dist

      - name: install Laravel Pint, PHPStan, ParaTest & Psalm
        run: |
          composer require laravel/pint --dev
          composer require phpstan/phpstan --dev
          composer require brianium/paratest:^7.0 --dev
          composer require vimeo/psalm --dev
          composer require psalm/plugin-laravel --dev

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Node dependencies
        run: npm ci

      - name: Build frontend assets
        run: npm run build

      - name: generate application key
        run: php artisan key:generate

      - name: run Laravel migrations
        run: php artisan migrate --force

      - name: run linting (Laravel Pint)
        run: make lint
        env:
          CI: true

      - name: run static analysis (PHPStan)
        run: make static-analysis

      - name: run tests
        run: php artisan test --parallel
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: sail
          DB_PASSWORD: password

      - name: Setup for Dusk
        run: |
          # Install Chrome
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          
          # Install ChromeDriver
          php artisan dusk:chrome-driver --detect
          
          # Create special Dusk environment
          cp .env.testing .env.dusk.local
          
          # Prepare the database - don't seed (tests use DatabaseMigrations)
          php artisan migrate:fresh --env=dusk.local
          
      - name: Start server for Dusk
        run: |
          # Start Laravel server with proper env
          php artisan serve --env=dusk.local &
          echo $! > server.pid
          
          # Wait for server to start
          echo "Waiting for server to start..."
          sleep 5
        env:
          APP_URL: http://127.0.0.1:8000
          
      - name: Run Dusk tests
        run: php artisan dusk --env=dusk.local
        
      - name: Stop Laravel server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi

  build_deploy:
    name: build and deploy
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1
        with:
          draft: false
          prerelease: false
          generateReleaseNotes: true
