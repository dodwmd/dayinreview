name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: test application
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, dom, fileinfo, mysql, redis
          coverage: xdebug

      - name: copy .env file
        run: cp .env.example .env

      - name: set environment variables
        run: |
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=laravel_test" >> .env
          echo "DB_USERNAME=root" >> .env
          echo "DB_PASSWORD=password" >> .env
          echo "REDIS_HOST=127.0.0.1" >> .env
          echo "REDIS_PASSWORD=null" >> .env
          echo "REDIS_PORT=6379" >> .env
          echo "CACHE_DRIVER=redis" >> .env
          echo "QUEUE_CONNECTION=redis" >> .env
          echo "SESSION_DRIVER=redis" >> .env

      - name: install composer dependencies
        run: composer install --no-interaction --prefer-dist

      - name: install Laravel Pint & PHPStan
        run: |
          composer require laravel/pint --dev
          composer require phpstan/phpstan --dev

      - name: generate application key
        run: php artisan key:generate

      - name: run Laravel migrations
        run: php artisan migrate --force

      - name: run linting (Laravel Pint)
        run: make lint
        env:
          CI: true

      - name: run static analysis (PHPStan)
        run: make static-analysis

      - name: run tests
        run: php artisan test --parallel

  build_deploy:
    name: build and deploy
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
            type=sha,format=long

      - name: build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: create GitHub release
        if: startsWith(github.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1
        with:
          draft: false
          prerelease: false
          generateReleaseNotes: true
